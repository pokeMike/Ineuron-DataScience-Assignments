use assignment;
show tables;
describe CityTable;

#Q1

select * from CityTable 
where COUNTRYCODE="USA" and POPULATION > 100000;

#Q2

select name from CityTable 
where COUNTRYCODE="USA" and POPULATION > 120000;

#Q3

select * from CityTable; 

#Q4

select * from CityTable
where ID=1661;

#Q5

select * from CityTable
where COUNTRYCODE="JPN";

#Q6

select name from CityTable
where COUNTRYCODE="JPN";

#Q7

select city, State from stationdata;

#Q8

select distinct city from stationdata
where id%2 = 0;

#Q9

select count(City) - count(distinct city) as Difference from stationdata;

#Q10

(select city,length(city) as Length
from stationdata
order by Length Desc ,City DESC
limit  1 )
UNION ALL
(select city,length(city) as Length
from stationdata
order by Length ASC ,City
limit  1 )
order by length;

#Q11

select distinct city from stationdata
where city Regexp'^[aeiouAEIOU]';

#Q12

select distinct city from stationdata
where city Regexp'[aeiouAEIOU]$';

#Q13

select distinct city from stationdata
where city not Rlike '^[aeiouAEIOU]';

#Q14

select distinct city from stationdata
where city not Rlike '[aeiouAEIOU]$';


#Q15

select distinct city from stationdata
where city not Rlike '^[aeiouAEIOU]' or city not Rlike '[aeiouAEIOU]$';



#Q16

select distinct city from stationdata
where city not Rlike '^[aeiouAEIOU]' and city not Rlike '[aeiouAEIOU]$';

#Q17

create table Product(
product_id int ,
product_name varchar(30),
unit_price int,
primary key(product_id));

create  table Sales(
seller_id int,
product_id int,
buyer_id int,
sale_date date,
quantity int,
price int,
foreign key(product_id) references Product(product_id)
);

insert Into Product values(1,"S8",100),
(2,"G4",800),(3,"iPhone",1400);

insert into Sales values
(1,1,1,"2019-01-21",2,2000),
(1,2,2,"2019-02-17",1,800),
(2,2,3,"2019-06-02",1,800),
(3,3,4,"2019-05-13",2,2800);

select distinct Product.product_id,product_name
from Product
where product.product_id Not in (
select Distinct Sales.product_id
from Sales
where sale_date Not Between  "2019-01-01" and  "2019-03-31");

#Q18

Create table Views(
article_id int,
author_id int,
viewer_id int,
view_date date);

Insert Into Views Values(1,3,5,"2019-08-01"),
(1,3,6,"2019-08-02"),
(2,3,6,"2019-08-01"),
(2,7,7,"2019-08-01"),
(2,7,6,"2019-08-02"),
(4,7,1,"2019-07-22"),
(3,4,4,"2019-07-21"),
(3,4,4,"2019-07-21");

select distinct author_id from Views
where author_id in (viewer_id)
order by author_id asc;

# Q19
create table Delivery(
delivery_id int,
customer_id int,
order_date date,
customer_pref_delivery_date date,
primary key (delivery_id));

insert into Delivery values
(1,1,"2019-08-01","2019-08-02"),
(2,5,"2019-08-02","2019-08-02"),
(3,1,"2019-08-11","2019-08-11"),
(4,3,"2019-08-24","2019-08-26"),
(5,4,"2019-08-21","2019-08-22"),
(6,2,"2019-08-11","2019-08-13");

select round((count(case when order_date = customer_pref_delivery_date  then 1 end ) / count(*))*100,2)
as immidiate_percentage from Delivery;
 
 
# Q20
create table Ads(
ad_id int,
user_id int,
action enum('Clicked','Viewed','Ignored'),
primary key (ad_id,user_id));
 
insert into Ads values
(1,1,"Clicked"),
(2,2,"Clicked"),
(3,3,"Viewed"),
(5,5,"Ignored"),
(1,7,"Ignored"),
(2,7,"Viewed"),
(3,5,"Clicked"),
(1,4,"Viewed"),
(2,11,"Viewed"),
(1,2,"Clicked");
 
 
 
select  ad_id, if(action = 'Ignored',0,
round((sum(if(action = 'Clicked' ,1,0))/sum(if(action != 'Ignored', 1 ,0)))*100,2))
as ctr
from Ads
group by ad_id
order by ctr desc, ad_id;

# Q21

create table Employee(
employee_id int,
team_id int,
primary key(employee_id));

insert into Employee values(1,8),
(2,8),
(3,8),
(4,7),
(5,9),
(6,9);

select  employee_id, (select count(team_id) from Employee where e.team_id = team_id)
as team_size
from Employee e; 

#Q22
create table Countries(
country_id int,
country_name varchar(25),
primary Key (country_id));

create table Weather(
country_id int,
weather_state int,
day date,
primary key(Country_id,day));

insert into Countries values(2,"USA"),
(3,"Australia"),
(7,"Peru"),
(5,"China"),
(8,"Morocco"),
(9,"Spain");

insert into Weather values(2,15,"2019-11-01"),
(2,12,"2019-10,28"),
(2,12,"2019-10-27"),
(3,-2,"2019-11-10"),
(3,0,"2019-11-11"),
(3,3,"2019-11-12"),
(5,16,"2019-11-07"),
(5,18,"2019-11-09"),
(5,21,"2019-11-23"),
(7,25,"2019-11-28"),
(7,22,"2019-12-01"),
(7,20,"2019-12-02"),
(8,25,"2019-11-05"),
(8,27,"2019-11-15"),
(8,31,"2019-11-25"),
(9,7,"2019-10-23"),
(9,3,"2019-12-23");

select country_name,
case when AVG(weather_state) <= 15 then "Cold"
when AVG(weather_state) >= 25 then "Hot"
else "Warm" end
as weather_type
from countries left join weather using(country_id)
where left(day,7) = '2019-11'
group by country_id;

#Q23

create table Prices(
product_id int,
start_date date,
end_date date,
price int,
primary key (product_id,start_date,end_date));

create table UnitSold(
product_id int,
purchase_date date,
units int);

insert into Prices values(1,"2019-02-17","2019-02-28",5),
(1,"2019-03-01","2019-03-22",20),
(2,"2019-02-01","2019-02-20",15),
(2,"2019-02-21","2019-03-31",30);

insert into UnitSold values(1,"2019-02-25",100),
(1,"2019-03-01",15),
(2,"2019-02-10",200),
(2,"2019-03-22",30);

select u.product_id, round(sum(u.units * p.price)/sum(u.units),2)
as average_price
from Prices p left join UnitSold u using(product_id)
where u.purchase_date Between p.start_date and p.end_date
group by product_id;

#Q24

create table Activity(
player_id int,
device_id int,
event_date date,
games_played int,
primary key (player_id,event_date));

insert into Activity values(1,2,"2016-03-01",5),
(1,2,"2016-05-02",6),
(2,3,"2017-06-25",1),
(3,1,"2016-03-02",0),
(3,4,"2018-07-03",5);

select distinct player_id, MIN(event_date) first_login
from Activity
group by player_id;

#Q25 Continuing the analysis from the previous table.
select distinct player_id, device_id
from Activity
where (player_id, event_date) in (select player_id, min(event_date)
from Activity  
group by player_id );
 
 
#Q26
create table Products(
product_id int,
product_name varchar(30),
product_category varchar(30),
primary key (product_id));

create table Orders(
product_id int,
order_date date,
unit int,
foreign key (product_id) references Products(product_id));

insert into Products values(1,"Leetcode Solutions","Book"),
(2,"Jewels of Stringology","Book"),
(3,"HP","Laptop"),
(4,"Lenovo","Laptop"),
(5,"Leetcode Kit","T-shirt");
 
insert into Orders values(1,"2020-02-05",60),
(1,"2020-02-10",70),
(2,"2020-01-18",30),
(2,"2020-02-11",80),
(3,"2020-02-17",2),
(3,"2020-02-24",3),
(4,"2020-03-01",20),
(4,"2020-03-04",30),
(4,"2020-03-04",60),
(5,"2020-02-25",50),
(5,"2020-02-27",50),
(5,"2020-03-01",50);
 
select p.product_name, sum(o.unit) 
as units
from Products p left join Orders o using(product_id)
where o.order_date between "2020-02-01" and "2020-02-29"
group by product_id
having units >= 100;
 
 
# Q27
 
create table Users(
user_id int,
name varchar(25),
mail varchar(35),
primary key(user_id));

insert into Users Values(1,"Winston","winston@leetcode.com"),
(2,"Jonathan","jonathanisgreat"),
(3,"Annabelle","bella-@leetcode.com"),
(4,"Sally","sally.come@leetcode.com"),
(5,"Marwan","quarz#2020@leetcode.com"),
(6,"David","david69@gmail.com"),
(7,"Shapiro",".shapo@leetcode.com");
 
select * from Users
where mail Regexp '^[A-Za-z]+[A-Za-z0-9\_\.\-]*@leetcode.com';
 
# Q28
create table Customers(
customer_id int,
name varchar(25),
country varchar(35),
primary key(customer_id));


create table Product(
product_id int,
description varchar(25),
price int,
primary key(product_id));


create table Orders(
order_id int,
customer_id int,
product_id int,
order_date date,
quantity int,
primary key(order_id));


insert into Customers values(1,"Winston","USA"),
(2,"Jonathan","Peru"),
(3,"Moustafa","Egypt");

insert into Product values(10,"LC Phone",300),
(20,"LC T-Shirt",10),
(30,"LC Book",45),
(40,"LC Keychain",2);


insert into Orders values(1,1,10,"2020-06-10",1),
(2,1,20,"2020-07-01",1),
(3,1,30,"2020-07-08",2),
(4,2,10,"2020-06-15",2),
(5,2,40,"2020-07-01",10),
(6,3,20,"2020-06-24",2),
(7,3,20,"2020-06-25",2),
(9,3,30,"2020-05-08",3);

select customer_id, name
from Customers join Orders using(customer_id)
join Product Using(product_id)
group by customer_id
Having sum(if(left(order_date,7) = '2020-06', quantity,0)*price) >=100
and sum(if(left(order_date,7)= '2020-07',quantity,0)*price) >= 100;
 
 
#Q29
 
create table TVProgram(
program_date date,
content_id int,
channel varchar(25),
primary key(program_date,content_id));
 
create table Content(
content_id int,
title varchar(25),
Kids_content enum("Y","N"),
content_type varchar(25));
 
insert into TVProgram values("2020-06-10",1,"LC-Channel"),
("2020-05-11",2,"LC-Channel"),
("2020-05-12",3,"LC-Channel"),
("2020-05-13",4,"Disney Ch"),
("2020-06-18",4,"Disney Ch"),
("2020-07-15",5,"Disney Ch");
 
insert into Content values(1,"Leetcode Movie","N","Movies"),
(2,"Alg. for kids","Y","Series"),
(3,"Database Sols","N","Series"),
(4,"Alladin","Y","Series"),
(5,"Cinderrella","Y","Movies");


select distinct title from Content right join TVProgram using(content_id)
where Kids_content = "Y" and content_type = "Movies"
and Left(program_date,7) = "2020-06"; 
 
 
# Q30
 
create table NPV(
id int,
year int,
npv int default NULL,
primary key(id,year));
 
create table Queries(
id int,
year int,
primary key(id,year));
 
insert into NPV values(1,2018,100),
(7,2020,30),
(13,2019,40),
(1,2019,113),
(2,2008,121),
(3,2009,12),
(11,2020,99),
(7,2019,0);
 
insert into Queries values(1,2019),
(2,2008),
(3,2009),
(7,2018),
(7,2019),
(7,2020),
(13,2019);
 
 
 
select n.id, year, npv from  NPV n  Right join Queries q using(year)
where n.id in (q.id);
 
select distinct year from nPV;
 
#Q32
 
create table EMployees(
id int,
name varchar(25),
primary key(id));
 
create table EmployeeUNI(
id int,
unique_id int,
primary key(id,unique_id));

insert into EMployees values(1,"Alice"),
(7,"Bob"),
(11,"Meir"),
(90,"Winston"),
(3,"Jonathan");

insert into EmployeeUNI values(3,1),
(11,2),
(90,3);



select e.name, unique_id from EMployees e left join EmployeeUNI using(id)
order by e.name;

#Q33

create table Users(
id int,
name varchar(25),
primary key (id));

create table rides(
id int,
user_id int,
distance int,
primary key (id));

insert into Users values(1,"Alice"),
(2,"Bob"),
(3,"Alex"),
(4,"Donald"),
(7,"Lee");
insert into Users values(13,"Jonathan"),
(19,"Elvis");

insert into rides values (1,1,120),
(2,2,317),
(3,3,222),
(4,7,100),
(5,13,312),
(6,19,50),
(7,7,120),
(8,19,400),
(9,7,230);


select u.name, coalesce(sum(r.distance),0) as "travelled_distance"
from Users u left join rides r 
on u.id = r.user_id
group by u.name
order by travelled_distance desc, u.name ;

#Q34 Same as Question 21

#Q35

create table Movies(
movie_id int,
title varchar(25),
primary key(movie_id));

create table Users(
user_id int,
name varchar(25),
primary key(user_id));

create table MovieRating(
movie_id int,
user_id int,
rating int,
create_at date,
primary key(movie_id,user_id));

Insert into Movies values(1,"Daniel"),
(2,"Frozen 2"),
(3,"Joker");

insert into Users values(1,"Daniel"),
(2,"Monica"),
(3,"Maria"),
(4,"James");

insert into MovieRating values
(1,1,3,"2020-01-12"),
(1,2,4,"2020-02-11"),
(1,3,2,"2020-02-12"),
(1,4,1,"2020-02-17"),
(2,1,5,"2020-02-17"),
(2,2,2,"2020-02-01"),
(2,3,2,"2020-03-01"),
(3,1,3,"2020-02-22"),
(3,2,4,"2020-02-25");

(select name Results
from Users left join MovieRating r using(user_id)
group by user_id
order by count(r.rating) desc, name limit 1)
union all
(select m.title
from Movies m left join MovieRating r using(movie_id)
where left(r.create_at,7) = "2020-02"
group by movie_id
order by avg(r.rating) desc, title limit 1 );

#36

create table Users(
id int,
name varchar(25),
primary key (id));

create table rides(
id int,
user_id int,
distance int,
primary key (id));

insert into Users values(1,"Alice"),
(2,"Bob"),
(3,"Alex"),
(4,"Donald"),
(7,"Lee"),
(13,"Jonathan"),
(19,"Elvis");

insert into rides values (1,1,120),
(2,2,317),
(3,3,222),
(4,7,100),
(5,13,312),
(6,19,50),
(7,7,120),
(8,19,400),
(9,7,230);

select u.name, coalesce(sum(r.distance),0) as "travelled_distance"
from Users u left join rides r 
on u.id = r.user_id
group by u.name
order by travelled_distance desc, u.name ;

#Q37


 #Q32
 
 create table EMployees(
 id int,
 name varchar(25),
 primary key(id));
 
 create table EmployeeUNI(
 id int,
 unique_id int,
 primary key(id,unique_id));

insert into EMployees values(1,"Alice"),
(7,"Bob"),
(11,"Meir"),
(90,"Winston"),
(3,"Jonathan");

insert into EmployeeUNI values(3,1),
(11,2),
(90,3);

select unique_id, e.name from EMployees e left join EmployeeUNI using(id)
order by e.name;

#Q38
create table Departments(
id int,
name varchar(25),
primary key(id));

create table Students(id int,
name varchar(25),
derpartment_id int,
primary key(id));

insert into Departments values(1,"Electrical Engeneering"),
(7,"Computer Engineering"),
(13,"Business Administration");

insert into Students values (23,"Alice",1),
(1,"Bob",7),
(5,"Jennifer",13),
(2,"John",14),
(4,"Jasmine",77),
(3,"Steve",74),
(6,"Luis",1),
(8,"Jonathan",7),
(7,"Daiana",33),
(11,"Madelynn",1); 

select s.id, s.name from Students s
left join Departments d 
on s.derpartment_id=d.id
where d.id is NULL;

#Q39

create table Calls(
from_id int,
to_id int,
duration int);

insert into Calls values(1,2,59),
(2,1,11),
(1,3,20),
(3,4,100),
(3,4,200),
(3,4,200),
(4,3,499);

select from_id as person1, to_id as person2,
count(duration) as call_count, sum(duration) as total_duration
from (select * from calls Union all
(select to_id, from_id, duration from Calls)) t1
where from_id < to_id group by person1,person2;

#Q40

create table Prices(
product_id int,
start_date date,
end_date date,
price int,
primary key (product_id,start_date,end_date));

create table UnitSold(
product_id int,
purchase_date date,
units int);

insert into Prices values(1,"2019-02-17","2019-02-28",5),
(1,"2019-03-01","2019-03-22",20),
(2,"2019-02-01","2019-02-20",15),
(2,"2019-02-21","2019-03-31",30);

insert into UnitSold values(1,"2019-02-25",100),
(1,"2019-03-01",15),
(2,"2019-02-10",200),
(2,"2019-03-22",30);

select u.product_id, round(sum(u.units * p.price)/sum(u.units),2)
as average_price
from Prices p left join UnitSold u using(product_id)
where u.purchase_date Between p.start_date and p.end_date
group by product_id;

#Q41
create table Warehouse(
name varchar(25),
product_id int,
units int,
primary key(name,product_id));


create table Products(
product_id int,
product_name varchar(25),
Width int,
Length int,
Height int,
primary key(product_id));

insert into Warehouse Values("LCHouse1",1,1),
("LCHouse1",2,10),
("LCHouse1",3,5),
("LCHouse2",1,2),
("LCHouse2",2,2),
("LCHouse3",4,1);



insert into Products values(1,"LC-TV",5,50,40),
(2,"LC-KeyChain",5,5,5),
(3,"LC-Phone",2,10,10),
(4,"LC-T-Shirt",4,10,20);

select name as warehouse_name, sum(units * vol) as volume
from Warehouse w
join (select product_id, Width*Length*Height as vol from Products) p
on w.product_id = p.product_id
group by name;

#Q42
create table Sales(
sale_date date,
fruit enum("apples","oranges"),
sold_num int,
primary key (sale_date, fruit));
 
insert into Sales Values("2020-05-01","apples",10),
("2020-05-01","oranges",8),
("2020-05-02","apples",15),
("2020-05-02","oranges",15),
("2020-05-03","apples",20),
("2020-05-03","oranges",0),
("2020-05-04","apples",15),
("2020-05-04","oranges",16);
 
select sale_date, sum(if(s.fruit = "apples",s.sold_num,-s.sold_num)) as diff
from Sales s
group by s.sale_date;


#Q43

create table Activity(
player_id int,
device_id int,
event_date date,
games_played int,
primary key (player_id,event_date));

insert into Activity values(1,2,"2016-03-01",5),
(1,2,"2016-05-02",6),
(2,3,"2017-06-25",1),
(3,1,"2016-03-02",0),
(3,4,"2018-07-03",5);

select round(a_frac.PlayerCount/count(distinct a_full.player_id),2) as fraction
from Activity a_full,
(select count(distinct a1.player_id) as PlayerCount from Activity a1 
inner join (
select player_id, min(event_date) as fl from Activity group by player_id) a2
on a1.player_id = a2.player_id and datediff(a1.event_date, a2.fl)=1) a_frac;


#Q45

create table Department(
dept_id int,
dept_name varchar(25),
primary key(dept_id));

Create table Student(
student_id int,
student_name varchar(25),
gender varchar(8),
dept_id int,
primary key(student_id),
foreign key(dept_id) references Department(dept_id));

insert into Department values(1,"Engineering"),
(2,"Science"),
(3,"Law");

insert into student values(1,"Jack","M",1),
(2,"Jane","F",1),
(3,"Mark","M",2);


select d.dept_name, count(distinct s.student_id) as student_number
from Student s  right join Department d using(dept_id)
group by dept_name
order by student_number desc, dept_name;

#Q46

create table Customer(
customer_id int,
product_key int);

create table Product(
product_key int,
primary key(product_key));

insert into Customer values(1,5),
(2,6),
(3,5),
(3,6),
(1,6);

insert into Product values(5),(6);


select customer_id from Customer
group by customer_id
having count(distinct product_key) = (select count(distinct product_key) from Product);

#Q47

create table Project(
project_id int,
employee_id int,
primary key(project_id,employee_id));

create table Employee(
employee_id int,
name varchar(25),
experience_years int,
primary key(employee_id));

insert into Project values(1,1),
(1,2),
(1,3),
(2,1),
(2,4);


insert into Employee values(1,"Khaled",3),
(2,"Ali",2),
(3,"John",3),
(4,"Doe",2);


select project_id, employee_id
from Project join Employee using(employee_id)
where (project_id, experience_years) in (
select project_id, max(experience_years)
from Project join Employee using (employee_id) group by project_id);

#Q48

create table Books(
book_id int,
name varchar(35),
available_form date,
primary key(book_id));

create table Orders(
order_id int,
book_id int,
quantity int,
dispatch_date date,
primary key(order_id),
foreign key(book_id) references Books(book_id));


insert into Books values(1,"Kalila and Demna","2010-01-01"),
(2,"28 letters","2012-05-12"),
(3,"The Hobbit","2019-06-10"),
(4,"13 Reasons Why","2019-06-01"),
(5,"The Hunger Games","2008-09-21");


insert into Orders values
(1,1,2,"2018-07-26"),
(2,1,1,"2018-11-25"),
(3,3,8,"2019-06-11"),
(4,4,6,"2019-06-05"),
(5,4,5,"2019-06-20"),
(6,5,9,"2009-02-02"),
(7,5,8,"2010-04-13");

select book_id, name from Books
where book_id not in(select book_id from Orders
where(dispatch_date between date_sub('2019-06-23',interval 1 year) and '2019-06-23')
group by (book_id) having sum(quantity) >= 10) and
available_form < date_sub('2019-06-23', interval 1 month);


#Q49

create table Enrollments(
student_id int,
course_id int,
grade int,
primary key(student_id,course_id));

insert into Enrollments values(2,2,95),
(2,3,95),
(1,1,90),
(1,2,99),
(3,1,80),
(3,2,75),
(3,3,82);

select e1.student_id, min(e1.course_id) as course_id, e1.grade
from Enrollments e1
where e1.grade = (select max(grade) as max_grade
from Enrollments e2 where e1.student_id = e2.student_id)
group by e1.student_id 
order by e1.student_id;


#Q50 
create table Teams(
team_id int,
team_name varchar(20),
primary key(team_id));

create table Matches(
match_id int,
host_team int,
guest_team int,
host_goals int,
guest_goals int,
primary key(match_id));

insert into Teams values
(15,1),
(25,1),
(30,1),
(45,1),
(10,2),
(35,2),
(50,2),
(20,3),
(40,3);

insert into Matches values(1,15,45,3,0),
(2,30,25,1,2),
(3,30,15,2,0),
(4,40,20,5,2),
(5,35,50,1,1);
 
select t.team_id, t.team_name, ifnull(sum(case when t.team_id = m.host_team and m.host_goals > m.guest_goals then 3
when t.team_id = m.host_team and m.host_goals = m.guest_goals then 1
when t.team_id = m.host_team and m.host_goals < m.guest_goals then 3
when t.team_id = m.host_team and m.host_goals = m.guest_goals then 1  else 0 end),0) as points
from Matches m
right join Teams t
on m.host_team = t.team_id or m.guest_team = t.team_id
group by team_id, team_name
order by points desc, team_id;
 
 
select t.team_name as group_id, t.team_id  , m.host_goals + m.guest_goals goal
from Teams t right join matches m 
on t.team_id = m.host_team
group by t.team_name
order by goal asc;
